{# templates/report.html.twig #}

{% extends 'base.html.twig' %}

{% block content %}
    <h2>{{ header }}</h2>

    <section>
    <h3>Kmom01</h3>
    <p>
        Jag har tidigare arbetat med objektorientering i kursen oopython. I kursen lärde jag mig om objektorienterade
        programmeringstekniker i python. Förrutom detta har jag inte riktigt några förkunskaper med objektorienterad
        programmering men jag skulle säga att jag har en god förståelse om grund tanken med objektorientering så tror
        det kommer gå hyfsat bra att lära sig använda det i PHP.
    </p>
    <p>
        PHPs modell för klasser och objekt skiljer sig inte jätte mycket från pythons som jag har skrivit i innnan.
        Den använder konstruktorer samma som python men i PHP finns också destruktorer för när objekt förstörs.
        Den använder också Docblock kommentarer, setter och getters på samma sätt som python. Liknande så kan också
        PHP klasser ha private variabler men den fungerar inte på samma sätt som python eftersom PHPs private variabler
        kan inte hämtas eller ändras från klassen utan ger då ett exception. En annan unik grej med PHPs klasser är att
        man kan använda en autoloader så att klasserna automatiskt när det behövs, man måste också använda en autoloader
        ifall man vill använda klasser i session.
    </p>
    <p>
        Kände mig ganska säker med kodbasen symfony som vi använder för report. Tyckte den påminde en hel del om Pico som
        vi använde för design kursen. Exempel koden för övningen var väldigt hjälpsam för att snabbt förstå hur symfony
        fungerade vilket gjorde att uppgiften blev allt för svårt. Har också arbetat med twig innan i Pico projektet så
        hade inte jätte svårt att lösa det. Valde att använda SASS för att skriva css koden eftersom jag har använt det
        innan och kände mig ganska bekväm med det. 
    </p>
    <p>
        Har inte hunnit läsa mycket av "PHP The Right Way" än men den delen jag läste som jag tyckte verkade mest intressant
        och användbar var nog hur man kan använda databaser med PHP. Efter jag har arbetat med databaser i tidigare kurser
        så börjar jag känna mig någonlunda bekväm med dom så det hade varit intressant att lära mig hur man koppla ihop dom
        med PHP. Såg också att man kunde använda SQLITE för att databasen vilket jag har använt innan så det kändes bra att
        man slipper lära sig något helt på nytt. Man använde också databasen på ett liknande sätt som i python med querys och
        fetchs så känns som jag börjar med en bra grundförståelse om området även om syntaxen är lite ny.
    </p>
    <p>
        Mitt TIL för detta kmomet skulle jag säga är att jag har börjat lära mig ramverket symfony vilket var ganska nytt för
        mig även om det påminde om tidigare arbeten men jag skulle säga att jag har fått en bra grundförståelse om det. Jag
        har också börjat lära mig om hur man skriver på objektorienterad sätt i PHP.
    </p>
    </section>

    <section>
    <h3>Kmom02</h3>
    <p>
        Arv inom objektorienterat PHP används för att helt enkelt ärva saker. Det används för att klasser ska kunna använda
        funktioner och variabler från andra klasser utan att behöva skriva ut dom igen. Förrutom detta kan man också överlagra
        funktioner då man ändrar koden i funktionen men man kan fortfarande hämta koden från den ärvda klassens funktionen med
        'parent::' vilket då används för att specifikt kalla på den ärvda klassen. Komposition är på liknande spår när en klass
        innehåller klass objekt av andra klasser tillexempel så har vi en klass som heter card och en som heter deck där deck
        innehåller en variabel som är en lista på 52 stycken card objekt. Interface i PHP används för att sätta ett krav på
        klasserna som använder interfacet att det måste ha vissa specifika saker som tillexempel ifall en klass använder ett
        interface med funktionen getAsString som returnar en string så måste klassen ha en metod som heter getAsString och returnar
        en string. Trait i PHP fungerar väldigt mycket som en ärvd klass men ett trait kan inte leva själv utan måste bli användas
        av en klass, en klass kan också använda flera traits. I helhet så används trait för att hålla metoder och variabler som
        flera klasser kan ha nytta av.
    </p>
    <p>
        När jag skulle börja implementera uppgiften valde jag att börja med att implementera dice övningen på report mest för att
        få lite känsla för det och för att ha lite exempel kod att falla tillbaka på ifall jag kände mig helt vilse. Därefter skapade
        jag två klasser Card och Deck och implementera alla variabler och funktioner jag trodde jag skulle behöva så som en konstruktor
        där variablernas värde sätts, getAsString metod för att lätt skriva ut värdena på sidan och för Deck klassen getDeck och getDeckSize
        för att hämta arrayen med korten och se hur många kort finns i leken. Därefter skapade jag symfony controllerna och templatesen,
        det var inte några stora svårigheter där eftersom jag kunde mest följa exempelkoden men så klart justera så det passar det jag
        behövde. Därefter la jag till en setDeck funktion i Deck klassen så att jag kunde sätta kortleken till den aktiva leken i session.
        Sedan spendera jag en del tid på att justera templatesen och css så utskiften av korten skulle se bra ut. I helhet skulle jag säga
        att jag blev nöjd med hur jag löste uppgiften då sidan ser ganska bra ut och fungerar på ett bra sätt men körde fast på en del
        små problem vilket gjorde att inte hann göra lika mycket som jag hade hoppats som tillexempel bygga ut JSON API:t och börjat på
        flödesschemat och psuedokoden för kmom03 uppgiften. Några förbättringar jag kan komma på nu är att card klassen behöver en numerisk
        representation av värdet på kortet för att lättare skapa ett spel med kortleken och jag hade velat bygga ett interface för Deck
        klassen för att lättare kunna bygga ut den.
    </p>
    <p>
        Hann inte börja med flödesdiagramet eller psuedokoden detta kmomet så tar det i kmom03 istället.
    </p>
    <p>
        Mitt TIL detta kmomet skulle jag säga är att jag har fått en större kunskap hur man kan använda Symfony och jag har lärt mig mycket
        mer om hur objektorientering kan användas inom PHP och lärt mig några ny begrepp som interface och trait.
    </p>
    </section>

    <section>
    <h3>Kmom03</h3>
    <p>
        Jag tyckte planering av arbetet med flödesdiagramet och psuedokoden gjorde själva programmering mycket lättare. Brukar inte gilla
        att planera mycket innan men tror det beror lite på lathet för kände nu hur mycket lättare det blev när man försökte tänka ut
        hur spelet skulle se ut och hur det kommer fungerar på sidan. Det var ju så klart lite som ändrades i själva implementation av spelet
        tillexempel så sparade jag hela Game klassen i session istället för en del av klassen vilket jag trodde jag skulle göra eftersom det
        var så jag implementera Deck i session men kom fram till det blev snyggare och lättare kod genom att spara hela klassobjektet i session.
        I helhet skulle jag säga att både flödesdiagramet och psuedokoden var till stor hjälp vid implementationen eftersom ifall jag kände mig
        lite vilse nån gång kunde jag helt enkelt kolla vart jag låg i "planen". Skulle dock säga att jag uppskattade flödesdiagrammet mycket mer
        eftersom det gick snabbt att göra och gav en tydlig steg för steg om hur spelet skulle fungera.
    </p>
    <p>
        Jag skulle säga att implementation av uppgiften gick ganska bra, var inte jätte mycket skillnad från de andra sidorna jag implementerade
        i Kmom02 så hade ganska mycket bakgrund när jag gick in i uppgiften. Skulle säga att strukturen blev också väldigt bra även om det kanske
        var lite mycket kod i kontrollern men kunde inte komma på en passande klass att flytta över koden till. Blev också hyfsat nöjd med hur själva
        spelet ser ut på sidan men det har en ganska simpel design så en förbättringspotential hade nog varit lite snyggare och intressantera design.
        Jag la också till två session invalidates som går av när kortleken shufflas och återställs vilket gör att det inte påverkar användaren något
        men borde ta bort problemet jag hade i kmom02 att session buggade till ibland. En annan förbättringspotential hade varit att kortleken bara
        shufflas och återställs när man går ner till 0 kort när man spelar 21 men det blir ganska svårt eftersom man kan då få några dubbletter under
        den rundan eftersom korten kommer då tekniskt sätt komma från två kortlekar, men har en plan för detta med en funktion för att plocka bort
        specifika kort från kortleken. Jag blev extra nöjd med hur esset fungerar i spelet eftersom kortets värde uppdateras automatiskt beroende
        på handens värde likt hur det fungerar i blackjack då det blir 1 istället för 14 ifall man överskrider 21 med ett ess på hand.
    </p>
    <p>
        Skulle säga att det var ganska svårt att komma in i hur man skulle använda Symfony när börjar känna nu att jag har lite ordning på det
        och det känns mycket lättare nu att använda för att lösa uppgifterna. Det var också ganska svårt att förstå hur man skulle använda routes
        och templates men när man väl fick i den gjorde det väldigt lätt och skapa nya sidor på sig hemsida. I helhet skulle jag säga att det är
        ett jätte användbart program för att skapa sidor som använder sig av PHP kod.
    </p>
    <p>
        Mitt TIL detta kmomet skulle jag säga är att jag har fått en bättre koll på session i symfony och jag har också utökat min förståelse på
        hur man kan använda POST routes. Skulle också säga att jag har förbättrat min förmåga att strukturera min kod och lärt mig använda klasser
        på bättre sätt.
    </p>
    </section>

    <section>
    <h3>Kmom04</h3>
    <p></p>
    </section>

    <section>
    <h3>Kmom05</h3>
    <p></p>
    </section>

    <section>
    <h3>Kmom06</h3>
    <p></p>
    </section>

    <section>
    <h3>Kmom10</h3>
    <p></p>
    </section>

{% endblock %}
